searchNodes=[{"doc":"Bloom Filter implementation in Elixir. Bloom filters are probabilistic data structures designed to efficiently tell you whether an element is present in a set. ## Usage Example iex&gt; f = BloomFilter.new 100, 0.001 iex&gt; f = BloomFilter.add(f, 42) iex&gt; BloomFilter.has?(f, 42) true","ref":"BloomFilter.html","title":"BloomFilter","type":"module"},{"doc":"Adds a given item to the set.","ref":"BloomFilter.html#add/2","title":"BloomFilter.add/2","type":"function"},{"doc":"Approximates the number of items in the filter.","ref":"BloomFilter.html#count/1","title":"BloomFilter.count/1","type":"function"},{"doc":"Checks whether a given item is likely to exist in the set.","ref":"BloomFilter.html#has?/2","title":"BloomFilter.has?/2","type":"function"},{"doc":"Creates a new bloom filter, given an estimated number of elements and a desired error rate (0.0..1).","ref":"BloomFilter.html#new/2","title":"BloomFilter.new/2","type":"function"},{"doc":"","ref":"BloomFilter.html#t:bit/0","title":"BloomFilter.bit/0","type":"type"},{"doc":"","ref":"BloomFilter.html#t:hash_func/0","title":"BloomFilter.hash_func/0","type":"type"},{"doc":"","ref":"BloomFilter.html#t:t/0","title":"BloomFilter.t/0","type":"type"}]